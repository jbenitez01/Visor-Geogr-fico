<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Visor Geográfico Profesional</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!-- Leaflet core -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

  <!-- Leaflet-Geoman -->
  <link href="https://unpkg.com/@geoman-io/leaflet-geoman-free@2.13.0/dist/leaflet-geoman.css" rel="stylesheet">
  <script src="https://unpkg.com/@geoman-io/leaflet-geoman-free@2.13.0/dist/leaflet-geoman.min.js"></script>

  <style>
    html, body, #map {
      height: 100%;
      margin: 0;
      font-family: Arial, sans-serif;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      left: 0;
      z-index: 0;
    }

    /* Panel flotante para capas */
    #layer-panel {
      position: absolute;
      bottom: 20px;
      left: 20px;
      z-index: 1000;
      background: #ffffffee;
      padding: 12px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
      max-height: 250px;
      overflow-y: auto;
      width: 220px;
    }

    #layer-panel h3 {
      margin: 0 0 10px;
      font-size: 15px;
    }

    .layer-item {
      margin-bottom: 6px;
    }

    .upload-btn {
      display: inline-block;
      padding: 6px 10px;
      background-color: #28a745;
      color: white;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
      margin-top: 8px;
    }

    .upload-btn:hover {
      background-color: #218838;
    }

    #file-input {
      display: none;
    }

    /* Espacio para zoom del mapa */
    .leaflet-control-zoom {
      margin-top: 60px;
    }
  </style>
</head>
<body>

  <div id="map"></div>

  <!-- Panel lateral de capas -->
  <div id="layer-panel">
    <h3>Capas CSV</h3>
    <div id="layerList"></div>
    <label for="file-input" class="upload-btn">+ Cargar CSV</label>
    <input type="file" id="file-input" accept=".csv" />
  </div>

  <script>
    const map = L.map('map').setView([-38, -64], 5);

    // Capas base
    const googleSat = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
      subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
      attribution: "Google",
      maxZoom: 20
    }).addTo(map);

    const ign = L.tileLayer.wms("https://wms.ign.gob.ar/geoserver/ows?", {
      layers: 'capabaseargenmap',
      format: 'image/png',
      transparent: false,
      attribution: "IGN"
    });

    const baseMaps = {
      "Google Satélite": googleSat,
      "IGN": ign
    };

    L.control.layers(baseMaps, null, { position: "topright" }).addTo(map);

    // Carga CSV
    const dynamicLayers = {};

    document.getElementById("file-input").addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function (event) {
        const csv = event.target.result;
        const lines = csv.trim().split("\n");
        const delimiter = lines[0].includes(";") ? ";" : ",";
        const headers = lines[0].split(delimiter);
        const layer = L.layerGroup();
        const bounds = [];

        lines.slice(1).forEach(line => {
          const values = line.split(delimiter);
          const lat = parseFloat(values[0]);
          const lon = parseFloat(values[1]);

          if (!isNaN(lat) && !isNaN(lon)) {
            const props = headers.slice(2).map((h, i) => `<b>${h}:</b> ${values[i + 2] || ""}`).join("<br>");
            const marker = L.circleMarker([lat, lon], {
              radius: 7,
              fillColor: "#FF3D00",
              color: "#000",
              weight: 1,
              opacity: 1,
              fillOpacity: 0.85
            }).bindPopup(`<b>Lat:</b> ${lat}<br><b>Lon:</b> ${lon}<br>${props}`);
            layer.addLayer(marker);
            bounds.push([lat, lon]);
          }
        });

        const layerId = 'csv_' + Date.now();
        dynamicLayers[layerId] = layer;
        map.addLayer(layer);
        if (bounds.length > 0) map.fitBounds(bounds);

        const layerList = document.getElementById('layerList');
        const div = document.createElement('div');
        div.className = 'layer-item';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = true;
        checkbox.id = layerId;

        const label = document.createElement('label');
        label.htmlFor = layerId;
        label.textContent = file.name;

        checkbox.addEventListener('change', function () {
          if (this.checked) {
            map.addLayer(layer);
          } else {
            map.removeLayer(layer);
          }
        });

        div.appendChild(checkbox);
        div.appendChild(label);
        layerList.appendChild(div);
      };

      reader.readAsText(file);
    });

    // Geoman Control (flotante y profesional)
    map.pm.addControls({
      position: 'topleft',
      drawCircle: false,
      drawMarker: false,
      drawCircleMarker: false,
      drawPolygon: false,
      drawRectangle: false,
      drawText: false,
      drawPolyline: true, // Solo permitir líneas para medir
      editMode: false,
      dragMode: false,
      cutPolygon: false,
      removalMode: true
    });

    // Mostrar longitud al crear línea
    map.on('pm:create', e => {
      if (e.shape === 'Line') {
        const latlngs = e.layer.getLatLngs();
        let total = 0;
        for (let i = 1; i < latlngs.length; i++) {
          total += latlngs[i - 1].distanceTo(latlngs[i]);
        }
        const km = (total / 1000).toFixed(2);
        e.layer.bindPopup(`Distancia: ${km} km`).openPopup();
      }
    });
  </script>
</body>
</html>
